// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['backbone', 'settings', 'pageable', 'models/telefone', 'models/email', 'models/endereco', 'collections/telefones', 'collections/emails', 'collections/enderecos', 'backbone-forms-bootstrap'], function(Backbone, Settings, PageableCollection, Telefone, Email, Endereco, Telefones, Emails, Enderecos) {
    var Contato;
    return Contato = (function(_super) {

      __extends(Contato, _super);

      function Contato() {
        return Contato.__super__.constructor.apply(this, arguments);
      }

      Contato.prototype.idAttribute = "id";

      Contato.prototype.schema = {
        nome: {
          type: "Text",
          title: "Nome"
        },
        pessoaJurica: {
          title: "Espécie",
          type: "Radio",
          options: [
            {
              val: true,
              label: "Pessoa Jurídica"
            }, {
              val: false,
              label: "Pessoa Física"
            }
          ]
        },
        numeroDocumeno: {
          type: "Number",
          title: "CPF/CNPJ"
        },
        telefones: {
          type: "List",
          itemType: "InlineNestedModel",
          model: Telefone
        },
        emails: {
          type: "List",
          itemType: "InlineNestedModel",
          model: Email
        },
        enderecos: {
          type: "List",
          itemType: "InlineNestedModel",
          model: Endereco
        },
        descricao: {
          type: "TextArea",
          title: "Anotações"
        }
      };

      Contato.prototype.parse = function(response) {
        if (response.data != null) {
          response = response.data;
        }
        this.telefones = new Telefones([], {
          contato: this
        });
        this.enderecos = new Enderecos([], {
          contato: this
        });
        this.emails = new Emails([], {
          contato: this
        });
        if ((response.telefones != null) && response.telefones.length) {
          this.telefones.reset(response.telefones);
        }
        if ((response.enderecos != null) && response.enderecos.length) {
          this.enderecos.reset(response.enderecos);
        }
        if ((response.emails != null) && response.emails.length) {
          this.emails.reset(response.emails);
        }
        return response;
      };

      Contato.prototype.save = function(attrs, options) {
        return Contato.__super__.save.call(this, attrs, options);
      };

      return Contato;

    })(Backbone.Model);
  });

}).call(this);
